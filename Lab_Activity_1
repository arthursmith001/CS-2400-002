# Get user input for instruction percentages
$ALU_Percentage = Read-Host "Enter percentage of ALU instructions"
$LoadStore_Percentage = Read-Host "Enter percentage of Load/Store instructions"
$Branch_Percentage = Read-Host "Enter percentage of Branch instructions"

# Convert input strings to integers
$ALU_Percentage = [int]$ALU_Percentage
$LoadStore_Percentage = [int]$LoadStore_Percentage
$Branch_Percentage = [int]$Branch_Percentage

# Validate input percentages
if (($ALU_Percentage -le 0) -or ($LoadStore_Percentage -le 0) -or ($Branch_Percentage -le 0)) {
    Write-Host "Error: Percentages must be greater than 0."
    exit
}

if (($ALU_Percentage + $LoadStore_Percentage + $Branch_Percentage) -ne 100) {
    Write-Host "Error: Percentages must add up to 100."
    exit
}

# Get user input for cycles (CPI) - Validate and provide guidance
$ALU_Cycles = Read-Host "Enter number of cycles for ALU instructions (CPI - recommended range: 1-10)"
$LoadStore_Cycles = Read-Host "Enter number of cycles for Load/Store instructions (CPI - recommended range: 1-10)"
$Branch_Cycles = Read-Host "Enter number of cycles for Branch instructions (CPI - recommended range: 1-10)"

# Assume 1 million instructions for calculation
$Total_Instructions = [Decimal]1000000 

# Calculate number of instructions for each type
$ALU_Instructions = [Decimal]::Round($Total_Instructions * ($ALU_Percentage / 100))
$LoadStore_Instructions = [Decimal]::Round($Total_Instructions * ($LoadStore_Percentage / 100))
$Branch_Instructions = [Decimal]::Round($Total_Instructions * ($Branch_Percentage / 100))

try {
    # Calculate partial cycle counts using Decimal
    $ALU_Cycle_Count = [Decimal]$ALU_Cycles * $ALU_Instructions
    $LoadStore_Cycle_Count = [Decimal]$LoadStore_Cycles * $LoadStore_Instructions
    $Branch_Cycle_Count = [Decimal]$Branch_Cycles * $Branch_Instructions

    # Check if any partial cycle count exceeds Decimal range
    if ($ALU_Cycle_Count -gt [Decimal]7.9e28 -or $LoadStore_Cycle_Count -gt [Decimal]7.9e28 -or $Branch_Cycle_Count -gt [Decimal]7.9e28) {
        Write-Warning "Warning: Some calculations might exceed the Decimal range."
        Write-Warning "Using BigInteger for more precise calculations."

        # Use BigInteger only if necessary
        $ALU_Cycle_Count = [BigInteger]$ALU_Cycles * [BigInteger]$ALU_Instructions
        $LoadStore_Cycle_Count = [BigInteger]$LoadStore_Cycles * [BigInteger]$LoadStore_Instructions
        $Branch_Cycle_Count = [BigInteger]$Branch_Cycles * [BigInteger]$Branch_Instructions
        $Total_Cycles = $ALU_Cycle_Count + $LoadStore_Cycle_Count + $Branch_Cycle_Count
    } else {
        # Use Decimal for calculations if possible
        $Total_Cycles = $ALU_Cycle_Count + $LoadStore_Cycle_Count + $Branch_Cycle_Count
    }

    # Calculate Average CPI using Decimal
    $Average_CPI = $Total_Cycles / $Total_Instructions

    # Calculate total execution cycles for 1 million instructions
    $Total_Execution_Cycles = 1000000 * $Average_CPI

    # Calculate execution time at 2GHz clock rate
    $Execution_Time_Seconds = $Total_Execution_Cycles / 2000000000

    # Format execution time in milliseconds
    $Execution_Time_Milliseconds = $Execution_Time_Seconds * 1000

    # Display results
    Write-Host "Average CPI: $($Average_CPI)"
    Write-Host "Total execution cycles for 1 million instructions: $($Total_Execution_Cycles)"
    Write-Host "Execution time at 2GHz: $($Execution_Time_Milliseconds) milliseconds"

} catch {
    Write-Warning "Error: Calculation resulted in an unexpected issue."
}
