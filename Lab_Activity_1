# Function to get valid percentage input
function Get-ValidPercentage {
    param (
        [string]$instructionType
    )
    while ($true) {
        $input = Read-Host "Enter percentage for $instructionType instructions (0-100)"
        $percentage = 0
        if ([double]::TryParse($input, [ref]$percentage)) {
            if ($percentage -ge 0 -and $percentage -le 100) {
                return $percentage / 100
            }
        }
        Write-Host "Please enter a valid percentage between 0 and 100"
    }
}

# Function to get valid cycle input
function Get-ValidCycles {
    param (
        [string]$instructionType
    )
    while ($true) {
        $input = Read-Host "Enter number of cycles for $instructionType instructions (1 or greater)"
        $cycles = 0
        if ([int]::TryParse($input, [ref]$cycles)) {
            if ($cycles -ge 1) {
                return $cycles
            }
        }
        Write-Host "Please enter a valid number of cycles (1 or greater)"
    }
}

# Get instruction mix percentages from user
Write-Host "`nEnter instruction mix percentages:"
Write-Host "--------------------------------"
$aluPercentage = Get-ValidPercentage "ALU"
$loadStorePercentage = Get-ValidPercentage "Load/Store"
$branchPercentage = Get-ValidPercentage "Branch"

# Validate total percentage
$totalPercentage = $aluPercentage + $loadStorePercentage + $branchPercentage
if ([math]::Round($totalPercentage, 3) -ne 1) {
    Write-Host "`nError: Percentages must sum to 100%. Current sum: $([math]::Round($totalPercentage * 100, 1))%"
    exit
}

# Get cycles for each instruction type
Write-Host "`nEnter cycles for each instruction type:"
Write-Host "------------------------------------"
$aluCycles = Get-ValidCycles "ALU"
$loadStoreCycles = Get-ValidCycles "Load/Store"
$branchCycles = Get-ValidCycles "Branch"

# Input parameters
$totalInstructions = 1000000
$clockRate = 2e9  # 2GHz in Hz

# Create instruction mix dictionary
$instructionMix = @{
    'ALU' = @{
        Percentage = $aluPercentage
        Cycles = $aluCycles
    }
    'LoadStore' = @{
        Percentage = $loadStorePercentage
        Cycles = $loadStoreCycles
    }
    'Branch' = @{
        Percentage = $branchPercentage
        Cycles = $branchCycles
    }
}

# Calculate average CPI using the new formula
# (Cycle1/Instruction1% + Cycle2/Instruction2% + Cycle3/Instruction3%) / 3
$averageCPI = 0
foreach ($instruction in $instructionMix.Keys) {
    if ($instructionMix[$instruction].Percentage -gt 0) {
        $averageCPI += $instructionMix[$instruction].Cycles / $instructionMix[$instruction].Percentage
    }
}
$averageCPI = $averageCPI / 3

# Calculate total execution cycles
$totalCycles = $totalInstructions * $averageCPI

# Calculate execution time in seconds
$executionTime = $totalCycles / $clockRate

# Format results
Write-Host "`nPerformance Analysis Results:"
Write-Host "--------------------------"
Write-Host "a) Average CPI: $([math]::Round($averageCPI, 2))"
Write-Host "b) Total execution cycles: $([math]::Round($totalCycles, 0))"
Write-Host "c) Execution time: $([math]::Round($executionTime * 1000, 2)) milliseconds"

# Show detailed breakdown
Write-Host "`nDetailed Instruction Breakdown:"
Write-Host "--------------------------"
foreach ($instruction in $instructionMix.Keys) {
    $count = $totalInstructions * $instructionMix[$instruction].Percentage
    $cycles = $count * $instructionMix[$instruction].Cycles
    $individualCPI = if ($instructionMix[$instruction].Percentage -gt 0) {
        $instructionMix[$instruction].Cycles / $instructionMix[$instruction].Percentage
    } else {
        0
    }
    Write-Host "$instruction Instructions:"
    Write-Host "  Percentage: $([math]::Round($instructionMix[$instruction].Percentage * 100, 1))%"
    Write-Host "  Cycles per instruction: $($instructionMix[$instruction].Cycles)"
    Write-Host "  Individual CPI contribution: $([math]::Round($individualCPI, 2))"
    Write-Host "  Count: $([math]::Round($count, 0))"
    Write-Host "  Total Cycles: $([math]::Round($cycles, 0))`n"
}
